# -*- coding: utf-8 -*-
"""speedtest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sk9MVSmUaFBPEXcIU55VTDBxx5JmHjhO

# CSE5IDP Speedtest

**Downloading python package**

If you run it on your computer, you need to write the following command without the '!' before the pip command


You would need to execute the following command in your python enviornment/virtual enviornment:
```
pip install speedtest-cli
```

**GoogleColab-specific command:**
!pip install speedtest-cli

"""


"""**Speedtesting class**

Speedtesting class is designed to be scalable to do speedtest.net task and the custom speedtest task.
"""

import speedtest
import json
import requests
import sys, time
from socket import *

class Speedtesting:
  def __init__(self, custom = False):
    if not custom:
      self.speed_test = speedtest.Speedtest()
      self.speed_test.get_servers()
      self.speed_test.get_best_server()
      self.api_key = 'MSYZ8L99JXGS7CUW'

    else: #TODO to update else statement
    #TODO UPDATE IP ADDRESS HARDCODING
      pass

  def custom_upload_test(self):
    ip = '127.0.0.1'
    count = 1000
    BUFSIZE = 1024000
    port=8875
    all_upload = []
    avg_download = 0
    no_of_iterations = 10
    testdata = 'h' * (BUFSIZE-1)
    time_initial = time.time()
    st_socket = socket(AF_INET, SOCK_STREAM)
    time_pre_connection = time.time()
    st_socket.connect((ip, port))
    time_post_connection = time.time()
    time_pre_upload = time_post_connection
    for _ in range(no_of_iterations):
        for i in range(count):
            st_socket.send(bytearray(testdata,"utf-8"))
        time_post_upload = time.time()


        upload_speed = round((BUFSIZE*count*0.001*0.001) / (time_post_upload-time_pre_upload), 3)
        print (f"Upload speed: {upload_speed} Mb/sec.")
        all_upload.append(upload_speed)
    st_socket.shutdown(1)

    return sum(all_upload)/len(all_upload) #returning average

  #TODO to be implemented later
  def push_to_thingspeak(self, results_dictionary):
    _json = json.dumps(results_dictionary, indent = 4)
    url_str = f"https://api.thingspeak.com/update?api_key={self.api_key}&field1={results_dictionary['upload']}&field2={results_dictionary['download']}"
    print(url_str)
    response = requests.get(url_str)
    return response

  def test_upload_download(self, export = False):
    self.speed_test.download()
    self.speed_test.upload()
    res = self.speed_test.results.dict()
    if export:
      with open('results.json', 'w') as fp:
          json.dump(res, fp)
    return res
